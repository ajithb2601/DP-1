

 // USIng 2D DP
class Solution {
    public int coinChange(int[] coins, int amount) {
        // Base Case
        if (coins.length == 0 || coins == null) {
            return -1;
        }

        int[][] dp = new int[coins.length + 1][amount + 1]; // +1 = dummy row and +1 = dummy column.
        
        // Initialize the infinity column for the first row
        for (int j = 1; j < amount + 1; j++) {
            // Filling the zero row columns with amount + 1 to represent infinity
            dp[0][j] = amount + 1;
        }

        for (int i = 1; i < coins.length + 1; i++) {
            for (int j = 1; j < amount + 1; j++) {
                if (j < coins[i - 1]) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = Math.min(dp[i - 1][j], 1 + dp[i][j - coins[i - 1]]);
                }
            }
        }

        // Check if we found a solution
        if (dp[coins.length][amount] == amount + 1) {
            return -1;
        }

        return dp[coins.length][amount];
    }
}








// Recursive way - You get TLE.

class Solution {
    public int coinChange(int[] coins, int amount) {

        // Base case
        if(coins.length == 0 || coins == null)
        {
            return -1;
        }

        return recursive (coins, amount, 0, 0);
    }

    private int recursive ( int[] coins, int amount, int index, int coinsUsed)
    {
        // Base Case
        if(amount == 0)
        {
            return coinsUsed;
        }
        if(amount < 0 || index == coins.length )
        {
            return -1;
        }
        // Logic
        // 0 or Do not use coin
        int case1 = recursive ( coins, amount, index + 1, coinsUsed);
        // 1 or Use coin
        int case2 = recursive ( coins, amount - coins[index], index , coinsUsed + 1);

        if (case1 == -1)
        {
            return case2;
        }
          if (case2 == -1)
        {
            return case1;
        }

        return Math.min(case1, case2);

    }
}
